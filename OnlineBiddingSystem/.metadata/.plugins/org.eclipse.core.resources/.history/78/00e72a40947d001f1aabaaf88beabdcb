package com.crimsonlogic.onlinebiddingsystem.controller;

import com.crimsonlogic.onlinebiddingsystem.dto.RegistrationDto;
import com.crimsonlogic.onlinebiddingsystem.dto.UserDto;
import com.crimsonlogic.onlinebiddingsystem.dto.UserInfoDto;
import com.crimsonlogic.onlinebiddingsystem.entity.User;
import com.crimsonlogic.onlinebiddingsystem.entity.UserInfo;
import com.crimsonlogic.onlinebiddingsystem.service.AuthService;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    private final AuthService authService;
    private final ModelMapper modelMapper;

    // Constructor injection
    public AuthController(AuthService authService, ModelMapper modelMapper) {
        this.authService = authService;
        this.modelMapper = modelMapper;
    }

    @PostMapping("/register")
    public ResponseEntity<String> register(@RequestBody RegistrationDto registrationDto, HttpSession session) {
        User user = modelMapper.map(registrationDto.getUser(), User.class);
        UserInfo userInfo = modelMapper.map(registrationDto.getUserInfo(), UserInfo.class);
        
        authService.register(user, userInfo);
        
        // Store user info in session as DTOs
        session.setAttribute("user", modelMapper.map(user, UserDto.class));
        session.setAttribute("userInfo", modelMapper.map(userInfo, UserInfoDto.class));
        
        return new ResponseEntity<>("User registered successfully", HttpStatus.CREATED);
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody UserDto userDto, HttpSession session) {
        String dashboardUrl = authService.login(userDto);
        
        // Get UserInfo by email
        UserInfoDto userInfo = authService.getUserInfoByEmail(userDto.getEmail());
        
        // Store user info in session
        session.setAttribute("user", userDto);
        session.setAttribute("userInfo", userInfo);
        
        return new ResponseEntity<>(dashboardUrl, HttpStatus.OK);
    }
}
