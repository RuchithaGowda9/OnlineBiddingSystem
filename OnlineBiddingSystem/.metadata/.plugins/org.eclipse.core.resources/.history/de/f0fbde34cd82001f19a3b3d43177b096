package com.crimsonlogic.onlinebiddingsystem.serviceimpl;

import com.crimsonlogic.onlinebiddingsystem.dto.ProductDto;
import com.crimsonlogic.onlinebiddingsystem.entity.Product;
import com.crimsonlogic.onlinebiddingsystem.entity.ProductCategory;
import com.crimsonlogic.onlinebiddingsystem.entity.User;
import com.crimsonlogic.onlinebiddingsystem.exception.ResourceNotFoundException;
import com.crimsonlogic.onlinebiddingsystem.repository.ProductRepository;
import com.crimsonlogic.onlinebiddingsystem.repository.CategoryRepository;
import com.crimsonlogic.onlinebiddingsystem.repository.UserRepository;
import com.crimsonlogic.onlinebiddingsystem.service.ProductService;

import java.util.List;
import java.util.stream.Collectors;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class ProductServiceImpl implements ProductService {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private ImageStorageService imageStorageService;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public void addProduct(ProductDto productDto) throws ResourceNotFoundException {
        Product product = modelMapper.map(productDto, Product.class);

        // Fetch category and seller
        ProductCategory category = categoryRepository.findById(productDto.getCategoryId())
                .orElseThrow(() -> new ResourceNotFoundException("Category not found"));

        User seller = userRepository.findById(productDto.getSellerId())
                .orElseThrow(() -> new ResourceNotFoundException("Seller not found"));

        product.setCategory(category);
        product.setSellerId(seller);
        product.setProductStatus("active");

        // Handle image upload
        if (productDto.getImage() != null && !productDto.getImage().isEmpty()) {
            // Save the image and get the filename or path
            String imagePath = imageStorageService.saveImage(productDto.getImage());
            product.setImage(imagePath); // Store the filename in the database
        }

        productRepository.save(product);
    }
    public List<ProductDto> getProductsBySeller(Long sellerId) {
        List<Product> products = productRepository.findBySellerId_userId(sellerId);
        return products.stream().map(this::convertToDto).collect(Collectors.toList());
    }
    private ProductDto convertToDto(Product product) {
        ProductDto dto = new ProductDto();
        dto.setProductId(product.getProductId());
        dto.setName(product.getProductName());
        dto.setAskingPrice(product.getAskingPrice());
        dto.setEndTime(product.getEndTime());
        dto.setDescription(product.getDescription());
        dto.setCategoryId(product.getCategory().getId());
        // Set other fields as necessary
        return dto;
    }


	
	@Override
    public byte[] getImageById(Long productId) throws ResourceNotFoundException {
        // Fetch the product by its ID
        Product product = productRepository.findById(productId)
            .orElseThrow(() -> new ResourceNotFoundException("Product not found with id " + productId));
        
        // Get the image path
        String imagePath = product.getImage(); // This should return the relative path of the image
        
        try {
           
            Path path = Paths.get("product-images/" + imagePath); 
            return Files.readAllBytes(path); // Read the image file into a byte array
        } catch (Exception e) {
            throw new RuntimeException("Could not read image: " + e.getMessage());
        }
    }


}
