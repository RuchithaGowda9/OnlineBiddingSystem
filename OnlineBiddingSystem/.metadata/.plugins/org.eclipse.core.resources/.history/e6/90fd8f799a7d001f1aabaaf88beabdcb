package com.crimsonlogic.onlinebiddingsystem.controller;

import com.crimsonlogic.onlinebiddingsystem.dto.RegistrationDto;
import com.crimsonlogic.onlinebiddingsystem.dto.UserDto;
import com.crimsonlogic.onlinebiddingsystem.dto.UserInfoDto;
import com.crimsonlogic.onlinebiddingsystem.entity.User;
import com.crimsonlogic.onlinebiddingsystem.entity.UserInfo;
import com.crimsonlogic.onlinebiddingsystem.service.AuthService;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpSession;

@CrossOrigin
@RestController
@RequestMapping("/api/auth")
public class AuthController {

    private final AuthService authService;
    private final ModelMapper modelMapper;

    @Autowired
    public AuthController(AuthService authService, ModelMapper modelMapper) {
        this.authService = authService;
        this.modelMapper = modelMapper;
    }

    @PostMapping("/register")
    public ResponseEntity<RegistrationDto> register(@RequestBody RegistrationDto registrationDto, HttpSession session) {
        // Convert DTOs to entities
        User userPayload = modelMapper.map(registrationDto.getUser(), User.class);
        UserInfo userInfoPayload = modelMapper.map(registrationDto.getUserInfo(), UserInfo.class);

        // Set the role in UserInfo based on roleName
        if (registrationDto.getUserInfo().getRoleName() != null) {
            Role role = roleRepository.findByName(registrationDto.getUserInfo().getRoleName())
                .orElseThrow(() -> new RuntimeException("Role not found: " + registrationDto.getUserInfo().getRoleName()));
            userInfoPayload.setRole(role);
        } else {
            throw new RuntimeException("Role name must be provided");
        }

        // Call the service to register
        authService.register(userPayload, userInfoPayload);

        // Optionally, convert back to DTOs for response
        UserDto userResponse = modelMapper.map(userPayload, UserDto.class);
        UserInfoDto userInfoResponse = modelMapper.map(userInfoPayload, UserInfoDto.class);

        // Store user info in session
        session.setAttribute("user", userResponse);
        session.setAttribute("userInfo", userInfoResponse);

        // Create response DTO
        RegistrationDto responseDto = new RegistrationDto();
        responseDto.setUser(userResponse);
        responseDto.setUserInfo(userInfoResponse);

        return new ResponseEntity<>(responseDto, HttpStatus.CREATED);
    }



    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody UserDto userDto, HttpSession session) {
        String dashboardUrl = authService.login(userDto);
        
        // Assuming a method to get UserInfo by email
        UserInfoDto userInfo = authService.getUserInfoByEmail(userDto.getEmail());
        
        // Store user info in session
        session.setAttribute("user", userDto);
        session.setAttribute("userInfo", userInfo);
        
        return new ResponseEntity<>(dashboardUrl, HttpStatus.OK);
    }
}
