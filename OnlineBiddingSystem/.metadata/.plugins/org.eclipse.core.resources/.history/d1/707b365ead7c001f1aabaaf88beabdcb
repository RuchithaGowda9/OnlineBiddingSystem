package com.crimsonlogic.onlinebiddingsystem.serviceimpl;

import com.crimsonlogic.onlinebiddingsystem.dto.UserDto;
import com.crimsonlogic.onlinebiddingsystem.dto.UserInfoDto;
import com.crimsonlogic.onlinebiddingsystem.entity.Role;
import com.crimsonlogic.onlinebiddingsystem.entity.RoleName;
import com.crimsonlogic.onlinebiddingsystem.entity.User;
import com.crimsonlogic.onlinebiddingsystem.entity.UserInfo;
import com.crimsonlogic.onlinebiddingsystem.repository.UserRepository;
import com.crimsonlogic.onlinebiddingsystem.repository.UserInfoRepository;
import com.crimsonlogic.onlinebiddingsystem.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AuthServiceImpl implements AuthService {

	 @Autowired
	    private UserRepository userRepository;

	    @Autowired
	    private UserInfoRepository userInfoRepository;

	    @Override
	    public void register(UserDto userDto, UserInfoDto userInfoDto) {
	        User user = new User();
	        user.setEmail(userDto.getEmail());
	        user.setPassword(userDto.getPassword()); // Consider hashing the password

	        userRepository.save(user);

	        UserInfo userInfo = new UserInfo();
	        userInfo.setFirstName(userInfoDto.getFirstName());
	        userInfo.setLastName(userInfoDto.getLastName());
	        userInfo.setPhoneNumber(userInfoDto.getPhoneNumber());

	        // Automatically set role based on registration context
	        Role role = new Role();
	        role.setName(RoleName.CUSTOMER); // Default role

	        // Optionally, add logic to determine the role based on conditions (e.g., admin registration)
	        // For example, if there's a context or flag to indicate that an admin is registering:
	        // role.setName(isAdmin ? RoleName.ADMIN : RoleName.CUSTOMER);

	        userInfo.setRole(role);

	        userInfoRepository.save(userInfo);
	    }

	    @Override
	    public String login(UserDto userDto) {
	        // Implement login logic (e.g., authenticate the user)
	        return "Login successful"; // Placeholder
	    }
	}