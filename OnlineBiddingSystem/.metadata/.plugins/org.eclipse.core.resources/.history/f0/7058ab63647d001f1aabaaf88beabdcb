package com.crimsonlogic.onlinebiddingsystem.serviceimpl;

import com.crimsonlogic.onlinebiddingsystem.dto.UserDto;
import com.crimsonlogic.onlinebiddingsystem.entity.Role;
import com.crimsonlogic.onlinebiddingsystem.entity.User;
import com.crimsonlogic.onlinebiddingsystem.entity.UserInfo;
import com.crimsonlogic.onlinebiddingsystem.repository.RoleRepository;
import com.crimsonlogic.onlinebiddingsystem.repository.UserRepository;
import com.crimsonlogic.onlinebiddingsystem.repository.UserInfoRepository;
import com.crimsonlogic.onlinebiddingsystem.service.AuthService;

import jakarta.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AuthServiceImpl implements AuthService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserInfoRepository userInfoRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Transactional
    @Override
    public void register(UserDto userDto, UserInfoDto userInfoDto) {
        User user = new User();
        user.setEmail(userDto.getEmail());
        user.setPassword(userDto.getPassword());

        userRepository.save(user);

        UserInfo userInfo = new UserInfo();
        userInfo.setFirstName(userInfoDto.getFirstName());
        userInfo.setLastName(userInfoDto.getLastName());
        userInfo.setPhoneNumber(userInfoDto.getPhoneNumber());
        userInfo.setUser(user);

        Role role;
        switch (userDto.getRoleName()) {
            case "ADMIN":
                role = roleRepository.findById(1L).orElseThrow(() -> new RuntimeException("Role not found"));
                break;
            case "DELIVERY_PERSON":
                role = roleRepository.findById(3L).orElseThrow(() -> new RuntimeException("Role not found"));
                break;
            case "CUSTOMER":
            default:
                role = roleRepository.findById(2L).orElseThrow(() -> new RuntimeException("Role not found"));
                break;
        }

        userInfo.setRole(role);
        userInfoRepository.save(userInfo);
    }

    @Override
    public String login(UserDto userDto) {
        // Fetch the user by email
        User user = userRepository.findByEmail(userDto.getEmail())
                .orElseThrow(() -> new RuntimeException("User not found"));

        // Directly compare the plain text password
        if (userDto.getPassword().equals(user.getPassword())) {
            // Fetch the UserInfo associated with the user
            UserInfo userInfo = userInfoRepository.findByUser(user)
                    .orElseThrow(() -> new RuntimeException("UserInfo not found"));

            // Get the dashboard URL based on role ID
            return getDashboardUrlByRole(userInfo.getRole().getRoleId());
        } else {
            throw new RuntimeException("Invalid credentials");
        }
    }

    private String getDashboardUrlByRole(Long roleId) {
        switch (roleId.intValue()) {
            case 1: 
                return "/admin/dashboard";
            case 2: 
                return "/customer/dashboard";
            case 3: 
                return "/delivery/dashboard";
            default:
                throw new RuntimeException("Role not recognized");
        }
    }

}
