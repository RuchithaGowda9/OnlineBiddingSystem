package com.crimsonlogic.onlinebiddingsystem.serviceimpl;

import com.crimsonlogic.onlinebiddingsystem.dto.UserDto;
import com.crimsonlogic.onlinebiddingsystem.dto.UserInfoDto;
import com.crimsonlogic.onlinebiddingsystem.entity.Role;
import com.crimsonlogic.onlinebiddingsystem.entity.User;
import com.crimsonlogic.onlinebiddingsystem.entity.UserInfo;
import com.crimsonlogic.onlinebiddingsystem.repository.RoleRepository;
import com.crimsonlogic.onlinebiddingsystem.repository.UserRepository;
import com.crimsonlogic.onlinebiddingsystem.repository.UserInfoRepository;
import com.crimsonlogic.onlinebiddingsystem.service.AuthService;
import org.modelmapper.ModelMapper;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

@Service
public class AuthServiceImpl implements AuthService {

    private final UserRepository userRepository;
    private final UserInfoRepository userInfoRepository;
    private final RoleRepository roleRepository;
    private final ModelMapper modelMapper;

    // Constructor injection
    public AuthServiceImpl(UserRepository userRepository, UserInfoRepository userInfoRepository, RoleRepository roleRepository, ModelMapper modelMapper) {
        this.userRepository = userRepository;
        this.userInfoRepository = userInfoRepository;
        this.roleRepository = roleRepository;
        this.modelMapper = modelMapper;
    }

    @Transactional
    @Override
    public void register(UserDto userDto, UserInfoDto userInfoDto) {
        User user = modelMapper.map(userDto, User.class);
        userRepository.save(user);

        UserInfo userInfo = modelMapper.map(userInfoDto, UserInfo.class);
        userInfo.setUser(user);
        Role role = getRoleByName(userDto.getRoleName());
        userInfo.setRole(role);

        userInfoRepository.save(userInfo);
    }



    @Override
    public String login(UserDto userDto) {
        User user = userRepository.findByEmail(userDto.getEmail())
                .orElseThrow(() -> new RuntimeException("User not found"));
        if (userDto.getPassword().equals(user.getPassword())) {
            UserInfo userInfo = userInfoRepository.findByUser(user)
                    .orElseThrow(() -> new RuntimeException("UserInfo not found"));
            return getDashboardUrlByRole(userInfo.getRole().getRoleId());
        } else {
            throw new RuntimeException("Invalid credentials");
        }
    }

    private String getDashboardUrlByRole(Long roleId) {
        switch (roleId.intValue()) {
            case 1: 
                return "/admin/dashboard";
            case 2: 
                return "/customer/dashboard";
            case 3: 
                return "/delivery/dashboard";
            default:
                throw new RuntimeException("Role not recognized");
        }
    }

    @Override
    public UserInfoDto getUserInfoByEmail(String email) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
        UserInfo userInfo = userInfoRepository.findByUser(user)
                .orElseThrow(() -> new RuntimeException("UserInfo not found"));

        return modelMapper.map(userInfo, UserInfoDto.class);
    }

    private Role getRoleByName(String roleName) {
        return roleRepository.findByName(roleName)
                .orElseThrow(() -> new RuntimeException("Role not found for name: " + roleName));
    }
}
